@page "/groupusersettings/{idUser:int}/{idGroup:int}"
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@attribute [Authorize(Roles = "Admin, User")]
@inject NavigationManager navManager
@inject UsersService userService
@inject LogsService logsService
@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime js
@using System.Security.Claims

<PageTitle>controlBudgetApp - Ustawienia grupy</PageTitle>

<EditForm Model="model">
    <div class="row justify-content-md-center">
        <div class="col-xs-12 col-md-11 col-lg-9 col-xl-6 col-xxl-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Ustawienia użytkownika: @model.email
            </p>

            <div class="container d-none d-lg-block d-xl-block d-xxl-block">
                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Imię</label>
                    <InputText class="col-8 col-lg-7 form-control" @bind-Value="model.name"/>
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Nazwisko</label>
                    <InputText class="col-8 col-lg-7 form-control" maxlength="250" @bind-Value="model.surname"/>
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Email</label>
                    <InputText class="col-8 col-lg-7 form-control" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Rola</label>
                    <InputSelect class="col-8 col-lg-7 form-select" @bind-Value="model.PermissionList" >
                        @foreach (var Permission in Enum.GetValues(typeof(PermissionList)))
                        {
                            <option value="@Permission">@Permission</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="container d-lg-none d-xl-none d-xxl-none">
                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Imię</label>
                    <InputText class="col-12 form-control rounded" @bind-Value="model.name"/>
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Nazwisko</label>
                    <InputText class="col-12 form-control rounded" maxlength="250" @bind-Value="model.surname"/>
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Email</label>
                    <InputText class="col-12 form-control rounded" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Rola</label>
                    <InputSelect class="col-12 form-select rounded" @bind-Value="model.PermissionList" >
                        @foreach (var Permission in Enum.GetValues(typeof(PermissionList)))
                        {
                                <option value="@Permission">@Permission</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div>
                <button type="button" class="btn btn-success" @onclick="UpdateUser" >Edytuj użytkownika</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteUser" >Usuń z grupy</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int IdUser{ get; set; } = 0;
    [Parameter]
    public int IdGroup { get; set; } = 0;

    Model model = new Model();
    LogsClass log = new LogsClass();

    class Model
    {
        public PermissionList PermissionList { get; set; }
        public string? name { get; set; }
        public string? surname { get; set; }
        public string? email { get; set; }
    }

    enum PermissionList
    {
        Administrator,
        Użytkownik
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        if (IdUser == userInformation.id_user)
        {
            var permission = userInformation.admin_group;
            if (permission == "Admin")
            {
                permission = "Administrator";
                model.PermissionList = (PermissionList)Enum.Parse(typeof(PermissionList), permission);
                model.name = userInformation.name;
                model.surname = userInformation.surname;
                model.email = userInformation.email;
            }
            else if (permission == "User")
            {
                permission = "Użytkownik";
                model.PermissionList = (PermissionList)Enum.Parse(typeof(PermissionList), permission);
                model.name = userInformation.name;
                model.surname = userInformation.surname;
                model.email = userInformation.email;
            }
        }
        else
        {
            if (IdGroup == userInformation.id_group)
            {
                userInformation = userService.GetByUserIdUser(IdUser);
                var permission = userInformation.admin_group;
                if (permission == "Admin")
                {
                    permission = "Administrator";
                    model.PermissionList = (PermissionList)Enum.Parse(typeof(PermissionList), permission);
                    model.name = userInformation.name;
                    model.surname = userInformation.surname;
                    model.email = userInformation.email;
                }
                else if (permission == "User")
                {
                    permission = "Użytkownik";
                    model.PermissionList = (PermissionList)Enum.Parse(typeof(PermissionList), permission);
                    model.name = userInformation.name;
                    model.surname = userInformation.surname;
                    model.email = userInformation.email;
                }
            }
            else
            {
                model.name = "";
                model.surname = "";
                model.email = "";
            }
        }
    }

    async Task UpdateUser()
    {
        var checkEmail = userService.CheckEmail(model.email);
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var claimGroup = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        var accountUpdate = userService.GetByUserIdUser(IdUser);

        string roleGroup = "";

        switch (Convert.ToInt32(claimGroup))
        {
            case 1:
                roleGroup = "Admin";
                break;
            case 2:
                roleGroup = "User";
                break;
        }

        var status = false;
        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime();
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        if (checkEmail == null)
        {
            log.event_log = "failed update account. there is an account with the address: " + model.email;
            logsService.AddNewEvent(log);
            log = new LogsClass();
            js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
        }
        else if (checkEmail == true && userInformation.email != model.email && accountUpdate.email != model.email)
        {
            log.event_log = "failed update account. there is an account with the address: " + model.email;
            logsService.AddNewEvent(log);
            log = new LogsClass();
            js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
        }
        else
        {
            UsersClass uc = new UsersClass();
            if (IdUser == userInformation.id_user)
            {
                var permission = model.PermissionList.ToString();
                if (permission == "Administrator")
                {
                    permission = "Admin";
                    uc.id_user = accountUpdate.id_user;
                    uc.name = model.name;
                    uc.surname = model.surname;
                    uc.email = model.email;
                    uc.admin_group = permission; 
                    status = userService.EditUserGroup(uc);
                    if (status == true)
                    {
                        js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta.");
                        log.event_log = "successful update account permisions (admin): " + uc.id_user;
                        if ((claimEmail != model.email && userInformation.id_user == IdUser) || (roleGroup != userInformation.admin_group && userInformation.id_user == IdUser))
                    {
                            js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                            await customAuthStateProvider.UpdateAuthenticationState(null);
                            navManager.NavigateTo("/login", true);
                        }
                    }
                    else
                    {
                        js.InvokeVoidAsync("alert", "Nie udało się zaktualizować konta. Spróbuj ponownie później.");
                        log.event_log = "failed update account permisions (admin): " + uc.id_user;
                    }
                    logsService.AddNewEvent(log);
                    log = new LogsClass();
                }
                else if (permission == "Użytkownik")
                {
                    permission = "User";
                    uc.id_user = accountUpdate.id_user;
                    uc.name = model.name;
                    uc.surname = model.surname;
                    uc.email = model.email;
                    uc.admin_group = permission;
                    status = userService.EditUserGroup(uc);
                    if (status == true)
                    {
                        js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta.");
                        log.event_log = "successful update account permisions (user): " + uc.id_user;
                        if ((claimEmail != model.email && userInformation.id_user == IdUser) || (roleGroup != userInformation.admin_group && userInformation.id_user == IdUser))
                        {
                            js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                            await customAuthStateProvider.UpdateAuthenticationState(null);
                            navManager.NavigateTo("/login", true);
                        }
                    }
                    else
                    {
                        js.InvokeVoidAsync("alert", "Nie udało się zaktualizować konta. Spróbuj ponownie później.");
                        log.event_log = "failed update account permisions (user): " + uc.id_user;
                    }
                    logsService.AddNewEvent(log);
                    log = new LogsClass();
                }
            }
            else
            {
                if (IdGroup == userInformation.id_group)
                {
                    var permission = model.PermissionList.ToString();
                    if (permission == "Administrator")
                    {
                        permission = "Admin";
                        uc.id_user = accountUpdate.id_user;
                        uc.name = model.name;
                        uc.surname = model.surname;
                        uc.email = model.email;
                        uc.admin_group = permission;
                        status = userService.EditUserGroup(uc);
                        if (status == true)
                        {
                            js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta.");
                            log.event_log = "successful update account permisions (admin): " + uc.id_user;
                            if ((claimEmail != model.email && userInformation.id_user == IdUser) || (roleGroup != userInformation.admin_group && userInformation.id_user == IdUser))
                            {
                                js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                                await customAuthStateProvider.UpdateAuthenticationState(null);
                                navManager.NavigateTo("/login", true);
                            }
                        }
                        else
                        {
                            js.InvokeVoidAsync("alert", "Nie udało się zaktualizować konta. Spróbuj ponownie później.");
                            log.event_log = "failed update account permisions (admin): " + uc.id_user;
                        }
                        logsService.AddNewEvent(log);
                        log = new LogsClass();
                    }
                    else if (permission == "Użytkownik")
                    {
                        permission = "User";
                        uc.id_user = accountUpdate.id_user;
                        uc.name = model.name;
                        uc.surname = model.surname;
                        uc.email = model.email;
                        uc.admin_group = permission;
                        status = userService.EditUserGroup(uc);
                        if (status == true)
                        {
                            js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta.");
                            log.event_log = "successful update account permisions (user): " + uc.id_user;
                            if ((claimEmail != model.email && userInformation.id_user == IdUser) || (roleGroup != userInformation.admin_group && userInformation.id_user == IdUser))
                            {
                                js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                                await customAuthStateProvider.UpdateAuthenticationState(null);
                                navManager.NavigateTo("/login", true);
                            }
                        }
                        else
                        {
                            js.InvokeVoidAsync("alert", "Nie udało się zaktualizować konta. Spróbuj ponownie później.");
                            log.event_log = "failed update account permisions (user): " + uc.id_user;
                        }
                        logsService.AddNewEvent(log);
                        log = new LogsClass();
                    }
                }
                else
                {
                    js.InvokeVoidAsync("alert", "Nie pomyślny update!");
                    log.event_log = "failed update account in group: " + model.email;
                    logsService.AddNewEvent(log);
                    log = new LogsClass();
                }

            }
        }
    }

    async Task DeleteUser()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        int inGroupU = await userService.InGroupUsers(userInformation.id_group);
        int inGroupA = await userService.InGroupAdmin(userInformation.id_group);

        if (inGroupU >= 2)
        {
            if (inGroupA >= 2)
            {
                navManager.NavigateTo("/userdeletefromgroup/" + IdUser + "/" + IdGroup, true);
            }
            else if (inGroupA == 1 && userInformation.id_group != IdUser)
            {
                navManager.NavigateTo("/userdeletefromgroup/" + IdUser + "/" + IdGroup, true);
            }
            else
            {
                js.InvokeVoidAsync("alert", "Jesteś jedynym administratorem w grupie. Istnieją w niej również inni użytkownicy. Aby usunąć grupę, usuń resztę użytkowników. W przypadku usunięcia tylko siebie z grupy, przydziel rolę „Administratora” innemu użytkownikowi w grupie.");
            }
        }
        else
        {
            navManager.NavigateTo("/groupdeletion/" + IdGroup, true);
        }
    }
}