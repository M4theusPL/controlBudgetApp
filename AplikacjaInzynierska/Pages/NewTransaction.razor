@page "/newtransaction"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@using AplikacjaInzynierska.Data
@attribute [Authorize(Roles = "Admin, User")]
@inject TransactionService transactionService
@inject UsersService groupUserService
@inject LogsService logsService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using System.Security.Claims

<PageTitle>controlBudgetApp - Nowa transakcja</PageTitle>

<EditForm Model="model">
    <div class="row justify-content-md-center">
        <div class="col-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Dodaj nową transakcję
            </p>
            
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Nazwa transakcji</label>
                <InputText class="form-control" @bind-Value="model.name_transaction"/>
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Opis</label>
                <InputTextArea class="form-control" maxlength="250" @bind-Value="model.description"/>
            </div>
    
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Kwota</label>
                <InputNumber class="form-control" min="0.00" step="0.01" @bind-Value="model.amount" />
                <label class="input-group-text">zł</label>
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Data transakcji</label>
                <InputDate class="form-control" @bind-Value="model.date_transaction" />
            </div>
    
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Typ</label>
                <InputSelect class="form-select" @bind-Value="model.ListTransactions" >
                    @foreach (var Transaction in Enum.GetValues(typeof(ListTransactions)))
                    {
                        <option value="@Transaction">@Transaction</option>
                    }
                </InputSelect>
            </div>
    
            <!-- add file -->
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text">Załącznik</label>
                <InputFile class="form-control" />
            </div>

            <div>
                <button type="button" class="btn btn-success" @onclick="Authenticate">Dodaj transakcję</button>
            </div>

        </div>
    </div>

</EditForm>


@code {

        Model model = new Model();

    class Model
    {
        public ListTransactions ListTransactions { get; set; }
        public string? name_transaction { get; set; } = "";
        public string? description { get; set; } = "";
        public double amount { get; set; } = 0.00;
        public DateTime date_transaction { get; set; } = DateTime.Now.ToUniversalTime();
    }

    enum ListTransactions
    {
        Wydatek,
        Inwestycja,
        Przychód
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    TransactionsClass gu = new TransactionsClass();
    LogsClass log = new LogsClass();

    async Task Authenticate()
    {
        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");

        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;


        gu.id_user = Int32.Parse(claimIdUser);
        gu.id_group = userInformation.id_group;
        gu.name_transaction = model.name_transaction;
        gu.description = model.description;
        gu.amount = model.amount;
        gu.date_transaction = model.date_transaction.ToUniversalTime().AddDays(1);
        gu.type_transaction = model.ListTransactions.ToString();
        transactionService.AddNewTransaction(gu);
        var topId = transactionService.showTopIdTransactionUser(userInformation.id_user);
        log.event_log = "added new transaction. ID: "+topId;
        logsService.AddNewEvent(log);
        await js.InvokeVoidAsync("alert", "Pomyślnie dodano nową transakcję!");
        navManager.NavigateTo("/listtransaction", true);
    }
    
}