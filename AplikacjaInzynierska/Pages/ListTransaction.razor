@page "/listtransaction"
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@inject TransactionService transactionService
@inherits OwningComponentBase<TransactionService>
@attribute [Authorize(Roles = "Admin, User")]
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims;
@inject UsersService groupUserService
@inject LogsService logsService
@using Microsoft.JSInterop
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@using System.IO;
@inject IJSRuntime JSRuntime

<PageTitle>controlBudgetApp - Lista transakcji</PageTitle>

@if (trans == null)
{
    <div class="row justify-content-md-center text-center">
        <p class="fs-4 fw-bold">Brak transakcji. Proszę dodać transakcje.</p>
    </div>
} 
else
{
    <div class="row justify-content-md-center text-center">
        
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
                <div class="row justify-content-md-center">
                    <p class="fs-4 fw-bold">Lista transakcji</p>
                    <div class="col-5 mb-2 bg-light text-dark text-center rounded">
                       <EditForm Model="filter">
                            <div class="input-group mb-3">
                                <label class="col-sm-5 input-group-text" >Wyszukiwana fraza</label>
                                <input type="text" class="form-control" @bind="SearchedText" @bind:event="oninput" @onchange="@FilterChanged" /> 
                            </div>
                        
                            Sortuj od
                            <select Id="CountryList" class="form-group" @bind="SelectedValue" @bind:event="oninput" @onchange="@FilterChanged">
                            @foreach (var item in Filters)
                            {
                                <option value="@item.IdFilter">@item.Title</option>
                            }
                            </select>
                        </EditForm>
                        <button onclick="@PDFGenerate">PDF</button>
                    </div>
                </div>
                         
                <table class="table table-striped table-hover">
                    <thead>
                        <tr class="fw-bold">
                            <td>#</td>
                            <td>Nazwa</td>
                            <td>Opis</td>
                            <td>Kwota</td>
                            <td>Data transakcji</td>
                            <td>Podgląd</td>
                        </tr>
                    </thead>

                    <tbody>
                    @foreach (var trans in trans)
                        {
                            <tr>
                                <td>@trans.id_user_transaction</td>
                                <td>@trans.name_transaction</td>
                                <td>@trans.description</td>
                                <td>@trans.amount</td>
                                <td>@trans.date_transaction.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <a class="nav-link" href="/transaction/@trans.id_user_transaction">
                                        <span class="material-icons" aria-hidden="true">search</span>
                                    </a>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
        </div>
    </div>
}

@code {

    private class Transaction
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
        public double amount { get; set; }
        public string? date_transaction { get; set; }
    }

    private string SearchedText { get; set; } = "";

    public Filter filter = new Filter();
    public int SelectedValue { get; set; } = 1;

    public class Filter
    {
        public int IdFilter { get; set; }
        public string Title { get; set; }
    }
    public List<Filter> Filters { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public System.Collections.Generic.IList<TransactionsClass> trans;
    LogsClass log = new LogsClass();

    public async Task<byte[]> PDFGenerate()
    {
        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = Convert.ToInt32(claimIdUser);

        using (var stream = new MemoryStream())
        {
            var document = new Document();
            var writer = PdfWriter.GetInstance(document, stream);
            DateTime dateNowPdf = DateTime.Now.ToUniversalTime();
            document.Open();

            Paragraph paragraph = new Paragraph("NAZWA APLIKACJI", new Font(Font.HELVETICA, 21, Font.BOLD));
            paragraph.Alignment = Element.ALIGN_LEFT;
            document.Add(paragraph);
            document.Add(new Paragraph(" "));

            paragraph = new Paragraph("Raport z dnia " + dateNowPdf.ToString("yyyy-MM-dd"), new Font(Font.HELVETICA, 18, Font.BOLD));
            paragraph.Alignment = Element.ALIGN_CENTER;
            document.Add(paragraph);
            document.Add(new Paragraph(" "));

            var table = new PdfPTable(5);
            float[] widths = new float[] { 40f, 100f, 150f, 75f, 110f };
            table.SetWidths(widths);

            PdfPCell cell = new PdfPCell(new Phrase("ID", new Font(Font.HELVETICA, 12, Font.BOLD)));
            table.AddCell(cell);

            cell = new PdfPCell(new Phrase("Nazwa", new Font(Font.HELVETICA, 12, Font.BOLD)));
            table.AddCell(cell);

            cell = new PdfPCell(new Phrase("Opis", new Font(Font.HELVETICA, 12, Font.BOLD)));
            table.AddCell(cell);

            cell = new PdfPCell(new Phrase("Kwota", new Font(Font.HELVETICA, 12, Font.BOLD)));
            table.AddCell(cell);

            cell = new PdfPCell(new Phrase("Data transakcji", new Font(Font.HELVETICA, 12, Font.BOLD)));
            table.AddCell(cell);

            foreach (var item in trans)
            {
                table.AddCell(item.id_user_transaction.ToString());
                table.AddCell(item.name_transaction);
                table.AddCell(item.description);
                table.AddCell(item.amount.ToString());
                table.AddCell(item.date_transaction.ToString("yyyy-MM-dd"));
            }

            document.Add(table);
            document.Close();
            var fileBytes = stream.ToArray();

            await JSRuntime.InvokeAsync<string>("ShowPDF", Convert.ToBase64String(fileBytes));
            log.event_log = "created PDF";
            logsService.AddNewEvent(log);
            log = new LogsClass();
            return stream.ToArray();
        }

    }

    private async Task FilterChanged(ChangeEventArgs args)
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);

        await JSRuntime.InvokeAsync<object>("console.log", SelectedValue);

        if (userInformation.id_group == 0)
        {
            trans = Service.displaySearchTransaction(userInformation.id_user, SearchedText, SelectedValue);
        }
        else
        {
            trans = Service.displayGroupSearchTransaction(userInformation.id_group, SearchedText, SelectedValue);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Filters = new List<Filter>()
        {
            new Filter{IdFilter = 1, Title = "ID rosnąco"},
            new Filter{IdFilter = 2, Title = "ID malejąco"},
            new Filter{IdFilter = 3, Title = "nazwy A-Z"},
            new Filter{IdFilter = 4, Title = "nazwy Z-A"},
            new Filter{IdFilter = 5, Title = "opisu A-Z"},
            new Filter{IdFilter = 6, Title = "opisu Z-A"},
            new Filter{IdFilter = 7, Title = "kwoty rosnąco"},
            new Filter{IdFilter = 8, Title = "kwoty malejąco"},
            new Filter{IdFilter = 9, Title = "daty transakcji najnowszej"},
            new Filter{IdFilter = 10, Title = "daty transakcji najstarszej"},
        };


        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);
        trans = null;
        if (userInformation.id_group == 0)
        {
            var userTransactions = transactionService.GetByUserTransactions(Int32.Parse(claimIdUser));
            if (userTransactions == null)
            {

                trans = null;
            }
            else
            {
                if (SearchedText.Trim().Length > 0)
                {
                    trans = Service.displaySearchTransaction(userInformation.id_user, SearchedText, SelectedValue);
                }
                else
                {
                    trans = Service.displayUserTransaction(Int32.Parse(claimIdUser));
                }
            }
        }
        else
        {
            var groupTransactions = transactionService.GetByGroupTransactions(userInformation.id_group);
            if (groupTransactions == null)
            {

                trans = null;
            }
            else
            {
                if (SearchedText.Trim().Length > 0)
                {
                    trans = Service.displayGroupSearchTransaction(userInformation.id_group, SearchedText, SelectedValue);
                }
                else 
                {
                    trans = Service.displayGroupTransaction(userInformation.id_group);
                }             
            }
        }
    }
   
}
