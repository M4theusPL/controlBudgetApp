@page "/listtransaction"
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@inject TransactionService transactionService
@inherits OwningComponentBase<TransactionService>
@attribute [Authorize(Roles = "Admin")]
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims;
@inject GroupUserService groupUserService

@if (trans == null)
{
    <div class="row justify-content-md-center text-center">
        <p class="fs-4 fw-bold">Brak transakcji. Proszę dodać transakcje.</p>
    </div>
} 
else
{
    <div class="row justify-content-md-center text-center">
        <p class="fs-4 fw-bold">Lista transakcji</p>
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
            @President
                    <div class="form-group">
                                                        <input type="text" class="form-control" @bind="President" @bind:event="oninput" @onchange="@NameChanged" /> 
                         </div>
                         
                <table class="table table-striped table-hover">
                    <thead>
                        <tr class="fw-bold">
                            <td>#</td>
                            <td>Nazwa</td>
                            <td>Opis</td>
                            <td>Kwota</td>
                            <td>Data transakcji</td>
                            <td>Podgląd</td>
                        </tr>
                    </thead>

                    <tbody>
                    @foreach (var trans in trans)
                        {
                            <tr>
                                <td>@trans.id_user_transaction</td>
                                <td>@trans.name_transaction</td>
                                <td>@trans.description</td>
                                <td>@trans.amount</td>
                                <td>@trans.date_transaction.ToString("dd-MM-yyyy")</td>
                                <td>
                                    <a class="nav-link" href="/transaction/@trans.id_user_transaction">
                                        <span class="material-icons" aria-hidden="true">search</span>
                                    </a>
                                </td>

                                 @*<button type="button" class="btn btn-success" >
                                     <span class="material-icons" aria-hidden="true">search</span>
                                 </button>*@
                            </tr>
                        }
                    </tbody>
                </table>
        </div>
    </div>
}

@code {

    private class Transaction
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
        public double amount { get; set; }
        public string? date_transaction { get; set; }

    }

    private string President { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public System.Collections.Generic.IList<TransactionsClass> trans;

    private async Task NameChanged(ChangeEventArgs args)
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);
        if (President.Trim().Length > 0)
        {
            trans = Service.displayGroupSearchTransaction(userInformation.id_group, President);
        }
        else
        {
            trans = Service.displayGroupTransaction(userInformation.id_group);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);
        trans = null;
        if (userInformation.id_group == 0)
        {
            var userTransactions = transactionService.GetByUserTransactions(Int32.Parse(claimIdUser));
            if (userTransactions == null)
            {

                trans = null;
            }
            else
            {
                trans = Service.displayUserTransaction(Int32.Parse(claimIdUser));
            }
        }
        else
        {
            var groupTransactions = transactionService.GetByGroupTransactions(userInformation.id_group);
            if (groupTransactions == null)
            {

                trans = null;
            }
            else
            {
                if (President.Trim().Length > 0)
                {
                    trans = Service.displayGroupSearchTransaction(userInformation.id_group, President);
                }
                else 
                {
                    trans = Service.displayGroupTransaction(userInformation.id_group);
                }             
            }
        }
    }

    
}
