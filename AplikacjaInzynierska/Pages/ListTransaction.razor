@page "/listtransaction"
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@inject TransactionService transactionService
@inherits OwningComponentBase<TransactionService>
@attribute [Authorize(Roles = "Admin, User")]
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims;
@inject UsersService userService
@inject LogsService logsService
@using Microsoft.JSInterop
@using iText.IO.Font.Constants;
@using iText.Kernel.Font;
@using iText.Kernel.Pdf;
@using iText.Layout;
@using iText.Layout.Element;
@using iText.IO.Font;
@using System.IO;
@using iText.Layout.Properties;
@using static iText.Kernel.Font.PdfFontFactory;
@inject IJSRuntime JSRuntime

<PageTitle>controlBudgetApp - Lista transakcji</PageTitle>

@if (transClass == null)
{
    <div class="row justify-content-md-center text-center">
        <p class="fs-4 fw-bold">Brak transakcji. Proszę dodać transakcje.</p>
    </div>
} 
else
{
    <div class="row justify-content-md-center text-center">
        
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
                <div class="row justify-content-md-center">
                    <p class="fs-4 fw-bold">Lista transakcji</p>

                     <EditForm Model="filter">
                         <div class="container">
                            <div class="row justify-content-xs-center">
                                <div class="col-xs-4 col-sm-12 col-md-12 col-lg-8 col-xl-6 col-xxl-5">
                                    <div class="input-group mb-2">
                                        <label class="input-group-text">Wyszukiwana fraza</label>
                                        <input type="text" class="form-control" @bind="SearchedText" @bind:event="oninput" @onchange="@FilterChanged" /> 
                                    </div>
                                </div>

                                <div class="col-xs-auto col-sm-12 col-md-12 col-lg-6 col-xl-auto col-xxl-auto">
                                    <div class="input-group mb-2">
                                        <label class="input-group-text">Raport w PDF</label>
                                        <button type="button" class="btn btn-secondary" onclick="@PDFGenerate">Generuj</button>
                                    </div>
                                </div>

                                <div class="col-xs-4 col-sm-12 col-md-12 col-lg-6 col-xl-6 col-xxl-4">
                                    <div class="input-group mb-2">
                                        <label class="input-group-text">Sortuj od</label>
                                        <select class="form-select" Id="CountryList" @bind="SelectedValue" @bind:event="oninput" @onchange="@FilterChanged">
                                            @foreach (var item in Filters)
                                            {
                                                <option value="@item.IdFilter">@item.Title</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>

                </div>

                <div class="my-4"></div>
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr class="fw-bold">
                                <td>#</td>
                                <td>Nazwa</td>
                                <td>Opis</td>
                                <td>Kwota</td>
                                <td>Data transakcji</td>
                                <td>Podgląd</td>
                            </tr>
                        </thead>

                        <tbody>
                        @foreach (var trans in transClass)
                            {
                                <tr>
                                    <td>@trans.id_user_transaction</td>
                                    <td>@trans.name_transaction</td>
                                    <td>@trans.description</td>
                                    <td>@trans.amount</td>
                                    <td>@trans.date_transaction.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <a class="nav-link" href="/transaction/@trans.id_user_transaction">
                                            <span class="material-icons" aria-hidden="true">search</span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
        </div>
    </div>
}

@code {

    private class Transaction
    {
        public int id { get; set; }
        public string? name { get; set; }
        public string? description { get; set; }
        public double amount { get; set; }
        public string? date_transaction { get; set; }
    }

    private string SearchedText { get; set; } = "";

    public Filter filter = new Filter();
    public List<Filter> Filters { get; set; }
    LogsClass log = new LogsClass();
    public int SelectedValue { get; set; } = 1;

    public class Filter
    {
        public int IdFilter { get; set; }
        public string Title { get; set; }
    }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public System.Collections.Generic.IList<TransactionsClass> transClass;

    public async Task<byte[]> PDFGenerate()
    {
        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime();
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = Convert.ToInt32(claimIdUser);

        using (var stream = new MemoryStream())
        {
            PdfDocument pdf = new PdfDocument(new PdfWriter(stream));
            var document = new Document(pdf);
            DateTime dateNowPdf = DateTime.Now.ToUniversalTime();

            PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD, "Cp1250", EmbeddingStrategy.PREFER_EMBEDDED);
            Paragraph paragraph = new Paragraph("controlBudgetApp").SetFont(font).SetFontSize(21);
            paragraph.SetTextAlignment(TextAlignment.LEFT);
            document.Add(paragraph);
            document.Add(new Paragraph(" "));

            paragraph = new Paragraph("Raport z dnia " + dateNowPdf.ToString("yyyy-MM-dd")).SetFont(font).SetFontSize(18);
            paragraph.SetTextAlignment(TextAlignment.CENTER);
            document.Add(paragraph);
            document.Add(new Paragraph(" "));

            Table table = new Table(5);
            table.SetWidth(UnitValue.CreatePercentValue(100));

            paragraph = new Paragraph("ID").SetFont(font).SetFontSize(12);
            Cell cell = new Cell(1, 1).Add(paragraph).SetWidth(40);
            table.AddCell(cell);

            paragraph = new Paragraph("Nazwa").SetFont(font).SetFontSize(12);
            cell = new Cell(1, 1).Add(paragraph).SetWidth(100);
            table.AddCell(cell);

            paragraph = new Paragraph("Opis").SetFont(font).SetFontSize(12);
            cell = new Cell(1, 1).Add(paragraph).SetWidth(150);
            table.AddCell(cell);

            paragraph = new Paragraph("Kwota").SetFont(font).SetFontSize(12);
            cell = new Cell(1, 1).Add(paragraph).SetWidth(75);
            table.AddCell(cell);

            paragraph = new Paragraph("Data transakcji").SetFont(font).SetFontSize(12);
            cell = new Cell(1, 1).Add(paragraph).SetWidth(110);
            table.AddCell(cell);


            font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA, "Cp1250", EmbeddingStrategy.PREFER_EMBEDDED);
            foreach (var item in transClass)
            {
                paragraph = new Paragraph(item.id_user_transaction.ToString()).SetFont(font).SetFontSize(12);
                cell = new Cell().Add(paragraph);
                table.AddCell(cell);
                paragraph = new Paragraph(item.name_transaction).SetFont(font).SetFontSize(12);
                cell = new Cell().Add(paragraph);
                table.AddCell(cell);
                paragraph = new Paragraph(item.description).SetFont(font).SetFontSize(12);
                cell = new Cell().Add(paragraph);
                table.AddCell(cell);
                paragraph = new Paragraph(Convert.ToString(item.amount)).SetFont(font).SetFontSize(12);
                cell = new Cell().Add(paragraph);
                table.AddCell(cell);
                paragraph = new Paragraph(item.date_transaction.ToString("yyyy-MM-dd")).SetFont(font).SetFontSize(12);
                cell = new Cell().Add(paragraph);
                table.AddCell(cell);
            }

            document.Add(table);
            document.Close();
            pdf.Close();
            byte[] fileBytes = stream.ToArray();

            await JSRuntime.InvokeAsync<string>("ShowPDF", Convert.ToBase64String(fileBytes));
            log.event_log = "created PDF";
            logsService.AddNewEvent(log);
            log = new LogsClass();
            return fileBytes;
        }

    }

    private async Task FilterChanged(ChangeEventArgs args)
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        if (userInformation.id_group == 0)
        {
            transClass = Service.displaySearchTransaction(userInformation.id_user, SearchedText, SelectedValue);
        }
        else
        {
            transClass = Service.displayGroupSearchTransaction(userInformation.id_group, SearchedText, SelectedValue);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Filters = new List<Filter>()
        {
            new Filter{IdFilter = 1, Title = "ID rosnąco"},
            new Filter{IdFilter = 2, Title = "ID malejąco"},
            new Filter{IdFilter = 3, Title = "nazwy A-Z"},
            new Filter{IdFilter = 4, Title = "nazwy Z-A"},
            new Filter{IdFilter = 5, Title = "opisu A-Z"},
            new Filter{IdFilter = 6, Title = "opisu Z-A"},
            new Filter{IdFilter = 7, Title = "kwoty rosnąco"},
            new Filter{IdFilter = 8, Title = "kwoty malejąco"},
            new Filter{IdFilter = 9, Title = "daty transakcji najnowszej"},
            new Filter{IdFilter = 10, Title = "daty transakcji najstarszej"},
        };


        var authState = await authenticationState;
        var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        transClass = null;
        if (userInformation.id_group == 0)
        {
            var userTransactions = transactionService.GetByUserTransactions(Int32.Parse(claimIdUser));
            if (userTransactions == null)
            {

                transClass = null;
            }
            else
            {
                if (SearchedText.Trim().Length > 0)
                {
                    transClass = Service.displaySearchTransaction(userInformation.id_user, SearchedText, SelectedValue);
                }
                else
                {
                    transClass = Service.displayUserTransaction(Int32.Parse(claimIdUser));
                }
            }
        }
        else
        {
            var groupTransactions = transactionService.GetByGroupTransactions(userInformation.id_group);
            if (groupTransactions == null)
            {

                transClass = null;
            }
            else
            {
                if (SearchedText.Trim().Length > 0)
                {
                    transClass = Service.displayGroupSearchTransaction(userInformation.id_group, SearchedText, SelectedValue);
                }
                else 
                {
                    transClass = Service.displayGroupTransaction(userInformation.id_group);
                }             
            }
        }
    }
   
}
