@page "/transactiondelete/{idTransaction:int}";
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@attribute [Authorize(Roles = "Admin, User")]
@inject NavigationManager navManager
@inject IJSRuntime js
@inject TransactionService transactionService
@inject UsersService userService
@inject LogsService logsService
@using System.Security.Claims

<div class="row justify-content-md-center text-center">
    <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
        <p class="fs-4 fw-bold">Czy na pewno chcesz usunąć transakcję numer @IdTransaction?</p>
            <button type="button" class="btn btn-success" @onclick="DeleteTransaction" >Tak</button>
            <button type="button" class="btn btn-danger" @onclick="CancelDeleteTransaction" >Nie</button>
    </div>
</div>

@code {
    [Parameter]
    public int IdTransaction { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    LogsClass log = new LogsClass();

    public async Task<bool> DeleteTransaction()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        transactionService.DeleteTransaction(IdTransaction);
        js.InvokeVoidAsync("alert", "Pomyślne usunięcie!");

        log.event_log = "successful delete transaction ID: " + IdTransaction;
        logsService.AddNewEvent(log);
        log = new LogsClass();
        navManager.NavigateTo("/listtransaction/", true);

        return true;
    }

    public async Task<bool> CancelDeleteTransaction()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        log.event_log = "canceled delete transaction ID: " + IdTransaction;
        logsService.AddNewEvent(log);
        log = new LogsClass();
        navManager.NavigateTo("/transaction/" + IdTransaction, true);

        return true;
    }

}
