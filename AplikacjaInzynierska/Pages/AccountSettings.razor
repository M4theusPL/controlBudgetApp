@page "/accountsettings"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@using AplikacjaInzynierska.Data
@inject GroupUserService groupUserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@using System.Security
@using System.Security.Claims
@inject NavigationManager navManager
@inherits OwningComponentBase<GroupUserService>
@inject Blazored.SessionStorage.ISessionStorageService session

<EditForm Model="model">
    <div class="row justify-content-md-center">
        <div class="col-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Ustawienia konta
            </p>
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Imię</label>
                    <InputText class="form-control" maxlength="40" @bind-Value="model.name" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Nazwisko</label>
                <InputText class="form-control" maxlength="150" @bind-Value="model.surname" />
            </div>

           <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Email</label>
                <InputText class="form-control" maxlength="150" @bind-Value="model.email" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Stare hasło</label>
                <InputText type="password" class="form-control" @bind-Value="model.password" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Nowe hasło</label>
                <InputText type="password" class="form-control" @bind-Value="model.newpassword" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Powtórz nowe hasło</label>
                <InputText type="password" class="form-control" @bind-Value="model.repeatpassword" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Data urodzenia</label>
                <InputDate class="form-control" @bind-Value="model.date_birthday" />
            </div>

            <!-- add file -->
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text">Zdjęcie profilowe</label>
                <InputFile class="form-control" />
            </div>

             <button type="button" class="btn btn-success" @onclick="Authenticate">Zapisz</button>
        </div>
    </div>
    
    @*<p>
        <img src="images/user.jpg" zdjecie"/>
        <InputFile/>
    </p>

    <button>Edytuj dane</button>*@
</EditForm>

@code {

    Model model = new Model();

    class Model
    {
        public string? name { get; set; }
        public string? surname { get; set; }
        public DateTime date_birthday { get; set; }
        public string? email { get; set; }
        public string? password { get; set; } = "";
        public string? newpassword { get; set; } = "";
        public string? repeatpassword { get; set; } = "";
    }


    public UserInformation userInfo;
    private ClaimsPrincipal user;

    public System.Collections.Generic.IList<GroupUserClass> userr;

    protected override async Task OnInitializedAsync()
    {
        userInfo = await session.GetItemAsync<UserInformation>("UserInfo");
        var email = userInfo.email;
        var userInformation = groupUserService.GetByUserEmail(email);

        model.name = userInformation.name;
        model.surname = userInformation.surname;
        model.email = userInformation.email;
        model.date_birthday = userInformation.date_birthday;
    }

    void Authenticate()
    {
        var userAccount = groupUserService.GetByUserEmail(model.email);
        
            if (userAccount == null)
            {
                js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
            }
            else
            {
                if (model.password == "")
                {
                    GroupUserClass gu = new GroupUserClass();

                    gu.name = model.name;
                    gu.surname = model.surname;
                    gu.date_birthday = model.date_birthday;
                    gu.email = model.email;
                    string newpassword = null;

                    Service.EditUser(gu, newpassword);
                    js.InvokeVoidAsync("alert", "Pomyślny update!");
                }
                else
                {
                    if (model.password == userAccount.password)
                    {
                        if ((model.newpassword != "") && (model.newpassword == model.repeatpassword))
                        {
                            GroupUserClass gu = new GroupUserClass();

                            gu.name = model.name;
                            gu.surname = model.surname;
                            gu.date_birthday = model.date_birthday.ToUniversalTime();
                            gu.email = model.email;
                            gu.password = model.password;
                            string newpassword = model.newpassword;

                            Service.EditUser(gu, newpassword);
                            model.password = "";
                            model.newpassword = "";
                            model.repeatpassword = "";
                            js.InvokeVoidAsync("alert", "Pomyślny update z hasłem!");
                        }
                        else
                        {
                            js.InvokeVoidAsync("alert", "Nowe hasła nie są takie same!");
                            model.password = "";
                            model.newpassword = "";
                            model.repeatpassword = "";
                        }
                        
                    }
                    else
                    {
                        js.InvokeVoidAsync("alert", "Stare hasło podano nieprawidłowe!");
                        model.password = "";
                        model.newpassword = "";
                        model.repeatpassword = "";
                    }
                }
        }
        
    }

}
