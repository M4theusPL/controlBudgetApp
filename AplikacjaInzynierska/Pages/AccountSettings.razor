@page "/accountsettings"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@using AplikacjaInzynierska.Data
@attribute [Authorize(Roles = "Admin, User")]
@inject UsersService userService
@inject LogsService logsService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims
@inject NavigationManager navManager
@using System.Security.Cryptography;

<PageTitle>controlBudgetApp - Ustawienia konta</PageTitle>

<EditForm Model="model">
    <div class="row justify-content-md-center">
        <div class="col-xs-12 col-md-11 col-lg-9 col-xl-6 col-xxl-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Ustawienia konta
            </p>
            <div class="container d-none d-lg-block d-xl-block d-xxl-block">
                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Imię</label>
                    <InputText class="col-8 col-lg-7 form-control" maxlength="40" @bind-Value="model.name" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Nazwisko</label>
                    <InputText class="col-8 col-lg-7 form-control" maxlength="150" @bind-Value="model.surname" />
                </div>

               <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Email</label>
                    <InputText class="col-8 col-lg-7 form-control" maxlength="150" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Stare hasło</label>
                    <InputText type="password" class="col-8 col-lg-7 form-control" @bind-Value="model.password" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Nowe hasło</label>
                    <InputText type="password" class="col-8 col-lg-7 form-control" @bind-Value="model.newpassword" />
                </div>

                <div class="input-group mb-3">
                    <span class="col-4 col-lg-5 input-group-text" >Powtórz nowe hasło</span>
                    <InputText type="password" class="col-8 col-lg-7 form-control" @bind-Value="model.repeatpassword" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 input-group-text" >Data urodzenia</label>
                    <InputDate class="form-control" @bind-Value="model.date_birthday" />
                </div>
            </div>


            <div class="container d-lg-none d-xl-none d-xxl-none">
                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Imię</label>
                    <InputText class="col-12 form-control rounded" maxlength="40" @bind-Value="model.name" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Nazwisko</label>
                    <InputText class="col-12 form-control rounded" maxlength="150" @bind-Value="model.surname" />
                </div>

               <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Email</label>
                    <InputText class="col-12 form-control rounded" maxlength="150" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Stare hasło</label>
                    <InputText type="password" class="col-12 form-control rounded" @bind-Value="model.password" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Nowe hasło</label>
                    <InputText type="password" class="col-12 form-control rounded" @bind-Value="model.newpassword" />
                </div>

                <div class="input-group mb-3">
                    <span class="col-12 input-group-text rounded" >Powtórz nowe hasło</span>
                    <InputText type="password" class="col-12 form-control rounded" @bind-Value="model.repeatpassword" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Data urodzenia</label>
                    <InputDate class="form-control rounded" @bind-Value="model.date_birthday" />
                </div>
            </div>

             <button type="button" class="btn btn-success" @onclick="CreateAccount">Zapisz</button>
        </div>
    </div>
</EditForm>

@code {

    Model model = new Model();
    LogsClass log = new LogsClass();

    class Model
    {
        public string? name { get; set; }
        public string? surname { get; set; }
        public DateTime date_birthday { get; set; }
        public string? email { get; set; }
        public string? password { get; set; } = "";
        public string? newpassword { get; set; } = "";
        public string? repeatpassword { get; set; } = "";
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        model.name = userInformation.name;
        model.surname = userInformation.surname;
        model.email = userInformation.email;
        model.date_birthday = userInformation.date_birthday;
    }

    async Task CreateAccount()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        var checkEmail = userService.CheckEmail(model.email);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");

        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        if (checkEmail == null)
        {
            log.event_log = "failed update account. there is an account with the address: " + model.email;
            logsService.AddNewEvent(log);
            log = new LogsClass();
            js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
        }
        else if (checkEmail == true && userInformation.email != model.email)
        {
            log.event_log = "failed update account. there is an account with the address: " + model.email;
            logsService.AddNewEvent(log);
            log = new LogsClass();
            js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
        }
        else
        {
            if (model.password == "")
            {
                UsersClass uc = new UsersClass();
                uc.name = model.name;
                uc.surname = model.surname;
                uc.date_birthday = model.date_birthday.ToUniversalTime();
                uc.email = model.email;
                string newpassword = null;

                userService.EditUser(uc, userInformation.id_user, newpassword);
                log.event_log = "successful update account without password";
                logsService.AddNewEvent(log);
                log = new LogsClass();
                js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta!");
            }
            else
            {
                    var sha256 = SHA256.Create();
                    var passwordBytes = System.Text.Encoding.UTF8.GetBytes(model.password);
                    var passwordHash = sha256.ComputeHash(passwordBytes);
                    string passwordHashed = BitConverter.ToString(passwordHash).Replace("-", "").ToLower();

                    if (passwordHashed == userInformation.password)
                    {
                        if ((model.newpassword != "") && (model.newpassword == model.repeatpassword))
                        {
                            UsersClass uc = new UsersClass();

                            var newPasswordBytes = System.Text.Encoding.UTF8.GetBytes(model.newpassword);
                            var newPasswordHash = sha256.ComputeHash(newPasswordBytes);
                            string newPasswordHashed = BitConverter.ToString(newPasswordHash).Replace("-", "").ToLower();

                            uc.name = model.name;
                            uc.surname = model.surname;
                            uc.date_birthday = model.date_birthday;
                            uc.email = model.email;
                            uc.password = passwordHashed;
                            string newpassword = newPasswordHashed;

                            userService.EditUser(uc, userInformation.id_user, newpassword);
                            model.password = "";
                            model.newpassword = "";
                            model.repeatpassword = "";

                            log.event_log = "successful update account with password";
                            logsService.AddNewEvent(log);
                            log = new LogsClass();
                            js.InvokeVoidAsync("alert", "Pomyślna aktualizacja konta!");
                            js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                            await customAuthStateProvider.UpdateAuthenticationState(null);
                            navManager.NavigateTo("/login", true);
                        }
                        else
                        {
                            model.password = "";
                            model.newpassword = "";
                            model.repeatpassword = "";
                            log.event_log = "failed update account with password";
                            logsService.AddNewEvent(log);
                            log = new LogsClass();
                            js.InvokeVoidAsync("alert", "Nowe hasła nie są takie same!");
                        }
                        
                    }
                    else
                    {
                        model.password = "";
                        model.newpassword = "";
                        model.repeatpassword = "";
                        log.event_log = "failed update account with password";
                        logsService.AddNewEvent(log);
                        log = new LogsClass();
                        js.InvokeVoidAsync("alert", "Stare hasło podano nieprawidłowe!");
                    }
                }
            if (claimEmail != model.email)
            {
                js.InvokeVoidAsync("alert", "Proszę o zalogowanie się ponownie.");
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(null);
                navManager.NavigateTo("/login", true);
            }
        }
        
    }

}
