@page "/accountregistration"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@using AplikacjaInzynierska.Data
@inject UsersService groupUserService
@inject LogsService logsService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using System.Security.Cryptography;

<PageTitle>controlBudgetApp - Rejestracja konta</PageTitle>

<EditForm Model="model" >
    <div class="row justify-content-md-center">
        <div class="col-xs-12 col-md-10 col-lg-8 col-xl-6 col-xxl-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Rejestracja konta
            </p>

            <div class="container d-none d-lg-block d-xl-block d-xxl-block">
                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Imię</label>
                    <InputText class="col-8 col-lg-7 col-xxl-8 form-control" maxlength="40" @bind-Value="model.name" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Nazwisko</label>
                    <InputText class="col-8 col-lg-7 col-xxl-8 form-control" maxlength="150" @bind-Value="model.surname" />
                </div>

               <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Email</label>
                    <InputText class="col-8 col-lg-7 col-xxl-8 form-control" maxlength="150" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Hasło</label>
                    <InputText type="col-8 col-lg-7 col-xxl-8 password" class="form-control" @bind-Value="model.password" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Powtórz hasło</label>
                    <InputText type="col-8 col-lg-7 col-xxl-8 password" class="form-control" @bind-Value="model.repeatpassword" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-4 col-lg-5 col-xxl-4 input-group-text" >Data urodzenia</label>
                    <InputDate class="col-8 col-lg-7 col-xxl-8 form-control" @bind-Value="model.date_birthday" />
                </div>
            </div>

            <div class="container d-lg-none d-xl-none d-xxl-none">
                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Imię</label>
                    <InputText class="col-12 form-control rounded" maxlength="40" @bind-Value="model.name" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Nazwisko</label>
                    <InputText class="col-12 form-control rounded" maxlength="150" @bind-Value="model.surname" />
                </div>

               <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Email</label>
                    <InputText class="col-12 form-control rounded" maxlength="150" @bind-Value="model.email" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text rounded" >Hasło</label>
                    <InputText type="password" class="col-12form-control rounded" @bind-Value="model.password" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Powtórz hasło</label>
                    <InputText type="password" class="col-12 form-control rounded" @bind-Value="model.repeatpassword" />
                </div>

                <div class="input-group mb-3">
                    <label class="col-12 input-group-text" >Data urodzenia</label>
                    <InputDate class="col-12 form-control rounded" @bind-Value="model.date_birthday" />
                </div>
            </div>

             <button type="button" class="btn btn-success" @onclick="Authenticate">Utwórz konto</button>
        </div>
    </div>

</EditForm>

@code {

    Model model = new Model();

    class Model
    {
        public string? name { get; set; }
        public string? surname { get; set; }
        public DateTime date_birthday { get; set; } = DateTime.Now.ToUniversalTime();
        public string? email { get; set; }
        public string? password { get; set; }
        public string? repeatpassword { get; set; }
    }

    UsersClass gu = new UsersClass();
    LogsClass log = new LogsClass();

    void Authenticate()
    {
        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");

        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = 0;

        if (model.password == model.repeatpassword)
        {
            var userAccount = groupUserService.GetByUserEmail(model.email);
            if (userAccount == null)
            {
                var sha256 = SHA256.Create();
                var passwordBytes = System.Text.Encoding.UTF8.GetBytes(model.password);
                var passwordHash = sha256.ComputeHash(passwordBytes);
                string passwordHashed = BitConverter.ToString(passwordHash).Replace("-", "").ToLower();

                gu.id_user = 0;
                gu.id_group = 0;
                gu.admin_group = "Admin";
                gu.name = model.name;
                gu.surname = model.surname;
                gu.date_birthday = model.date_birthday.ToUniversalTime();
                gu.email = model.email;
                gu.password = passwordHashed;
                groupUserService.AddNewUser(gu);
                navManager.NavigateTo("/accountcreatedsuccessfully", true);

                log.event_log = "successful register account: " + model.email;
                logsService.AddNewEvent(log);
            }
            else
            {
                js.InvokeVoidAsync("alert", "Konto pod tym adresem email już istnieje!");
                log.event_log = "failed register account: " + model.email;
                logsService.AddNewEvent(log);
                model.password = "";
                model.repeatpassword = "";
                log = new LogsClass();
                return;
            }
        }
        else 
        {
            js.InvokeVoidAsync("alert", "Hasła się nie zgadzają!");
            log.event_log = "failed register account: " + model.email;
            logsService.AddNewEvent(log);
            model.password = "";
            model.repeatpassword = "";
            log = new LogsClass();
            return;
        }
    }

}
