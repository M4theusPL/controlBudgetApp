@page "/"
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@inject TransactionService transactionService
@inject GroupUserService groupUserService
@inherits OwningComponentBase<TransactionService>
@inject IJSRuntime js;
@inject AuthenticationStateProvider authStateProvider;
@using System.Security.Claims;
@using ChartJs.Blazor;
@using ChartJs.Blazor.PieChart;

<PageTitle>Strona Główna</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Witaj, @context.User.Identity.Name!</h1>
        @if (trans == null)
        {
            <br />
            <h5>Proszę dodać transakcje, aby wyświetlić statystyki.</h5>
        }
        else
        {
            if(group == 0)
            {
                if(amount == 1)
                {
                    <Chart Config="_configMonth"></Chart>
                    
                }
                if(amountYear == 1)
                {
                    <br /><br /><hr />
                    <Chart Config="_configYear"></Chart>
                }
            }
            else
            {
                if(amount == 1)
                {
                    <Chart Config="_configMonth"></Chart>
                    
                }
                if(amountYear == 1)
                {
                    <br /><br /><hr />
                    <Chart Config="_configYear"></Chart>
                }

                if(amountGroup == 1)
                {
                    <br /><br /><hr />
                    <Chart Config="_configMonthGroup"></Chart>
                            
                }
                if(amountGroupYear == 1)
                {
                    <br /><br /><hr />
                    <Chart Config="_configYearGroup"></Chart>
                }
                
            }
            
        }
        
    </Authorized>
    <NotAuthorized>
        <h1>Opis strony!</h1>
        <span>
            <br />
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempus id nibh eu fringilla. Duis ullamcorper dui purus, non gravida ante placerat ut. Mauris sodales eros imperdiet orci blandit, non auctor nulla sagittis. Etiam porta sollicitudin sapien non suscipit. Nullam quis imperdiet lacus. Cras mollis nec mi sed tempus. Nulla erat ipsum, faucibus nec rutrum quis, porttitor dictum nisl. Phasellus rhoncus sem ac felis vestibulum, eget vulputate purus lobortis.
            <br />
            Nunc eget tortor sed nisi bibendum sollicitudin feugiat a leo. Vivamus volutpat nunc in justo feugiat varius. Nunc semper, dolor quis fringilla facilisis, arcu metus faucibus odio, eget mollis urna odio sit amet tellus. Nullam eget ipsum sed velit finibus tincidunt. Mauris non dapibus nisi. Aenean vestibulum sem nibh. Cras semper ultrices aliquam. Nunc in mauris elit. Ut eu pulvinar elit, ut dictum quam. Donec vitae dolor eu nisl blandit posuere vitae id justo. Suspendisse vestibulum erat in mollis pulvinar. Pellentesque enim arcu, ultrices non nulla aliquam, consequat condimentum felis. Duis finibus, diam nec vehicula gravida, felis dui maximus arcu, vitae feugiat ex dolor at mauris.
            <br />
            Morbi rutrum turpis vel sodales interdum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin mollis arcu eget est faucibus malesuada. Suspendisse id eros vitae nibh eleifend maximus in eleifend enim. Curabitur rhoncus lacus odio, at porttitor magna sollicitudin ac. Fusce quis arcu leo. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean imperdiet dolor ante, et tempor felis luctus quis. Integer condimentum sagittis augue, in consectetur nisl facilisis eget. Proin aliquet, neque sed eleifend dictum, neque orci mattis dui, ac sodales ex tellus quis diam. Curabitur a consectetur eros.
            <br />
            Suspendisse laoreet gravida massa vel tristique. Aenean tellus ligula, facilisis eu ligula quis, lacinia elementum magna. Nam fringilla iaculis elementum. Aliquam venenatis purus libero, nec venenatis ex varius at. Sed gravida ante sed mi interdum semper. Sed tincidunt, nibh nec dignissim interdum, nisl turpis congue sapien, vel faucibus augue libero sed neque. Sed sem neque, molestie sit amet velit ut, aliquam fringilla enim. Praesent ullamcorper placerat nunc quis venenatis. Phasellus pharetra risus facilisis nulla tristique, sed rutrum eros ultrices. Duis laoreet quam felis, a tincidunt lacus commodo eget. Morbi accumsan erat egestas nibh sagittis, sed sollicitudin ligula imperdiet. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Suspendisse et commodo urna.
            <br />
            Aenean blandit in quam in venenatis. Duis dapibus purus vitae sem rutrum eleifend. Fusce id pulvinar erat. Etiam bibendum dapibus eros vel suscipit. Quisque mollis posuere sollicitudin. Vivamus ac scelerisque ex, sit amet tincidunt metus. In in malesuada nulla, in fermentum orci. Sed malesuada eget orci vitae convallis. Cras quis nisl risus. Proin ut tortor iaculis, pellentesque lorem ut, dapibus erat. Morbi posuere arcu nibh, vel volutpat dolor maximus non. Pellentesque scelerisque a lacus id porta.
        </span>
        <SurveyPrompt Title="Aby w pełni korzystać z możliwości zaloguj się. Jeśli nie posiasz konta utwórz nowe." />
    </NotAuthorized>
</AuthorizeView>


@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public System.Collections.Generic.IList<TransactionsClass> trans;

    public int group = 0;
    public int amount = 1;
    public int amountYear = 1;
    public int amountGroup = 1;
    public int amountGroupYear = 1;

    private PieConfig _configMonth;
    private PieConfig _configYear;
    private PieConfig _configMonthGroup;
    private PieConfig _configYearGroup;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        if (authState.User.Identity.IsAuthenticated)
        {
            var claimIdUser = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
            var userInformation = groupUserService.GetByUserEmail(claimEmail);
            trans = null;
            if (userInformation.id_group == 0)
            {
                var userTransactions = transactionService.GetByUserTransactions(Int32.Parse(claimIdUser));
                if (userTransactions == null)
                {

                    trans = null;
                }
                else
                {
                    trans = Service.displayUserTransaction(Int32.Parse(claimIdUser));

                    _configMonth = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie tego miesiąca",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configMonth.Data.Labels.Add(typeTransaction);
                    }

                    double expenditure = transactionService.Expenditure(Int32.Parse(claimIdUser));
                    double proceeds = transactionService.Proceeds(Int32.Parse(claimIdUser));
                    double investment = transactionService.Investment(Int32.Parse(claimIdUser));

                    if (expenditure == 0 && proceeds == 0 && investment == 0)
                    {
                        amount = 0;
                    }

                    PieDataset<double> dataset = new PieDataset<double>(new[] { expenditure, proceeds, investment })
                        {
                            BackgroundColor = new[]
                                            {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configMonth.Data.Datasets.Add(dataset);


                    _configYear = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie tego roku",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configYear.Data.Labels.Add(typeTransaction);
                    }

                    double expenditureYear = transactionService.ExpenditureYear(Int32.Parse(claimIdUser));
                    double proceedsYear = transactionService.ProceedsYear(Int32.Parse(claimIdUser));
                    double investmentYear = transactionService.InvestmentYear(Int32.Parse(claimIdUser));

                    if (expenditureYear == 0 && proceedsYear == 0 && investmentYear == 0)
                    {
                        amountYear = 0;
                    }

                    PieDataset<double> dataSetYear = new PieDataset<double>(new[] { expenditureYear, proceedsYear, investmentYear })
                        {
                            BackgroundColor = new[]
                                                {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configYear.Data.Datasets.Add(dataSetYear);
                }
            }
            else if (userInformation.id_group == null)
            {
                trans = null;
            }
            else
            {
                var groupTransactions = transactionService.GetByGroupTransactions(userInformation.id_group);
                if (groupTransactions == null)
                {

                    trans = null;
                }
                else
                {
                    trans = Service.displayGroupTransaction(userInformation.id_group);
                    group = 1;

                    _configMonth = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie tego miesiąca",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configMonth.Data.Labels.Add(typeTransaction);
                    }

                    double expenditure = transactionService.Expenditure(Int32.Parse(claimIdUser));
                    double proceeds = transactionService.Proceeds(Int32.Parse(claimIdUser));
                    double investment = transactionService.Investment(Int32.Parse(claimIdUser));

                    if (expenditure == 0 && proceeds == 0 && investment == 0)
                    {
                        amount = 0;
                    }

                    PieDataset<double> dataset = new PieDataset<double>(new[] { expenditure, proceeds, investment })
                        {
                            BackgroundColor = new[]
                                                {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configMonth.Data.Datasets.Add(dataset);


                    _configYear = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie tego roku",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configYear.Data.Labels.Add(typeTransaction);
                    }

                    double expenditureYear = transactionService.ExpenditureGroupYear(Int32.Parse(claimIdUser));
                    double proceedsYear = transactionService.ProceedsGroupYear(Int32.Parse(claimIdUser));
                    double investmentYear = transactionService.InvestmentGroupYear(Int32.Parse(claimIdUser));

                    if (expenditureYear == 0 && proceedsYear == 0 && investmentYear == 0)
                    {
                        amountYear = 0;
                    }

                    PieDataset<double> datasetyear = new PieDataset<double>(new[] { expenditureYear, proceedsYear, investmentYear })
                        {
                            BackgroundColor = new[]
                                                    {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configYear.Data.Datasets.Add(datasetyear);

                    _configMonthGroup = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie grupy tego miesiąca",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configMonthGroup.Data.Labels.Add(typeTransaction);
                    }

                    double expenditureGroupMonth = transactionService.ExpenditureGroupMonth(userInformation.id_group);
                    double proceedsGroupMonth = transactionService.ProceedsGroupMonth(userInformation.id_group);
                    double investmentGroupMonth = transactionService.InvestmentGroupMonth(userInformation.id_group);

                    if (expenditureGroupMonth == 0 && proceedsGroupMonth == 0 && investmentGroupMonth == 0)
                    {
                        amountGroup = 0;
                    }

                    PieDataset<double> dateSetGroup = new PieDataset<double>(new[] { expenditureGroupMonth, proceedsGroupMonth, investmentGroupMonth })
                        {
                            BackgroundColor = new[]
                                                {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configMonthGroup.Data.Datasets.Add(dateSetGroup);


                    _configYearGroup = new PieConfig
                        {
                            Options = new PieOptions
                            {
                                Responsive = true,
                                Title = new OptionsTitle
                                {
                                    Display = true,
                                    Text = "Podsumowanie grupy tego roku",
                                }
                            }
                        };

                    foreach (string typeTransaction in new[] { "Wydatki", "Przychody", "Inwestycje" })
                    {
                        _configYearGroup.Data.Labels.Add(typeTransaction);
                    }

                    double expenditureGroupYear = transactionService.ExpenditureGroupYear(userInformation.id_group);
                    double proceedsGroupYear = transactionService.ProceedsGroupYear(userInformation.id_group);
                    double investmentGroupYear = transactionService.InvestmentGroupYear(userInformation.id_group);

                    if (expenditureGroupYear == 0 && proceedsGroupYear == 0 && investmentGroupYear == 0)
                    {
                        amountGroupYear = 0;
                    }

                    PieDataset<double> dataSetGroupYear = new PieDataset<double>(new[] { expenditureGroupYear, proceedsGroupYear, investmentGroupYear })
                        {
                            BackgroundColor = new[]
                                                    {
                            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
                        }
                        };

                    _configYearGroup.Data.Datasets.Add(dataSetGroupYear);
                }
            }
        }
        
        



       
    }
}