@page "/transaction/{idTransaction:int}"
@attribute [Authorize(Roles = "Admin, User")]
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@inject NavigationManager navManager
@inject IJSRuntime js
@inject TransactionService transactionService
@inject GroupUserService groupUserService
@inject LogsService logsService
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<EditForm Model="model">
    <div class="row justify-content-md-center">
        <div class="col-5 border p-3 mb-2 bg-light text-dark text-center rounded">
            <p class="fs-4 fw-bold">
                Transakcja numer: @model.id_user_transaction
            </p>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Nazwa transakcji</label>
                <InputText class="form-control" id="nameTransaction" @bind-Value="model.name_transaction" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Opis</label>
                <InputTextArea class="form-control" maxlength="250" @bind-Value="model.description"/>
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Kwota</label>
                <InputNumber class="form-control" min="0.00" step="0.01" @bind-Value="model.amount" />
                <label class="input-group-text">zł</label>
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Data transakcji</label>
                <InputDate class="form-control" @bind-Value="model.date_transaction" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Typ</label>
                <InputSelect class="form-select" @bind-Value="model.ListTransactions" >
                    @foreach (var Transaction in Enum.GetValues(typeof(ListTransactions)))
                    {
                            <option value="@Transaction">@Transaction</option>
                    }
                </InputSelect>
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Nazwa powiadomienia</label>
                <InputText class="form-control" maxlength="40" @bind-Value="model.name_notification" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Treść powiadmienia</label>
                <InputText class="form-control" maxlength="150" @bind-Value="model.description_notification" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Data powiadomienia</label>
                <InputDate class="form-control" @bind-Value="model.date_notification" />
            </div>

            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text" >Godzina powiadomienia</label>
                <input class="form-control" type="time" @bind="model.time_notification" />
            </div>

            <!-- add file -->
            <div class="input-group mb-3">
                <label class="col-sm-5 input-group-text">Załącznik</label>
                <InputFile class="form-control" />
            </div>

            <div>
                <button type="button" class="btn btn-success" @onclick="EditTransaction" >Edytuj transakcję</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteTransaction" >Usuń transakcję</button>
            </div>

        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public int IdTransaction { get; set; } = 0;

    Model model = new Model();

    class Model
    {
        public ListTransactions ListTransactions { get; set; }
        public int id_user_transaction { get; set; }
        public string? name_transaction { get; set; }
        public string? description { get; set; }
        public double amount { get; set; }
        public DateTime date_transaction { get; set; }
        public string? name_notification { get; set; }
        public string? description_notification { get; set; }
        public DateTime date_notification { get; set; }
        public TimeOnly time_notification { get; set; }
    }

    enum ListTransactions
    {
        Wydatek,
        Inwestycja,
        Przychód
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    LogsClass log = new LogsClass();

    protected override async Task OnInitializedAsync()
    {
        var transactionInformation = transactionService.GetByTransaction(IdTransaction);
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);

        if (transactionInformation == null)
        {
            model.id_user_transaction = 0;
            model.name_transaction = "";
            model.description = "";
            model.amount = 0.00;
            model.date_transaction = DateTime.Now.ToUniversalTime();
            model.name_notification = "";
            model.description_notification = "";
            model.date_notification = DateTime.Now.ToUniversalTime();
        }
        else
        {
            if (transactionInformation.id_user == userInformation.id_user)
            {
                model.id_user_transaction = transactionInformation.id_user_transaction;
                model.name_transaction = transactionInformation.name_transaction;
                model.description = transactionInformation.description;
                model.amount = transactionInformation.amount;
                model.date_transaction = transactionInformation.date_transaction;
                string type_transaction = transactionInformation.type_transaction;
                model.ListTransactions = (ListTransactions)Enum.Parse(typeof(ListTransactions), type_transaction);
                model.name_notification = transactionInformation.name_notification;
                model.description_notification = transactionInformation.description_notification;
                model.date_notification = transactionInformation.date_notification;
                model.time_notification = transactionInformation.time_notification;
            }
            else
            {
                if (transactionInformation.id_group == 0)
                {
                    model.id_user_transaction = 0;
                    model.name_transaction = "";
                    model.description = "";
                    model.amount = 0.00;
                    model.date_transaction = DateTime.Now.ToUniversalTime();
                    model.name_notification = "";
                    model.description_notification = "";
                    model.date_notification = DateTime.Now.ToUniversalTime();
                }
                else
                {
                    if (transactionInformation.id_group == userInformation.id_group)
                    {
                        model.id_user_transaction = transactionInformation.id_user_transaction;
                        model.name_transaction = transactionInformation.name_transaction;
                        model.description = transactionInformation.description;
                        model.amount = transactionInformation.amount;
                        model.date_transaction = transactionInformation.date_transaction;
                        string type_transaction = transactionInformation.type_transaction;
                        model.ListTransactions = (ListTransactions)Enum.Parse(typeof(ListTransactions), type_transaction);
                        model.name_notification = transactionInformation.name_notification;
                        model.description_notification = transactionInformation.description_notification;
                        model.date_notification = transactionInformation.date_notification;
                        model.time_notification = transactionInformation.time_notification;
                    }
                    else
                    {
                        model.id_user_transaction = 0;
                        model.name_transaction = "";
                        model.description = "";
                        model.amount = 0.00;
                        model.date_transaction = DateTime.Now.ToUniversalTime();
                        model.name_notification = "";
                        model.description_notification = "";
                        model.date_notification = DateTime.Now.ToUniversalTime();
                    }

                }
            }
        }
    }

    public async Task<bool> EditTransaction()
    {
        TransactionsClass gu = new TransactionsClass();

        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = groupUserService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        gu.id_user_transaction = model.id_user_transaction;
        gu.name_transaction = model.name_transaction;
        gu.description = model.description;
        gu.amount = model.amount;
        gu.date_transaction = model.date_transaction;
        gu.type_transaction = model.ListTransactions.ToString();
        gu.name_notification = model.name_notification;
        gu.description_notification = model.description_notification;
        gu.date_notification = model.date_notification;
        gu.time_notification = model.time_notification;
        transactionService.EditTransaction(gu);
        js.InvokeVoidAsync("alert", "Pomyślny update!");


        log.event_log = "successful update transaction ID: " + model.id_user_transaction;
        logsService.AddNewEvent(log);

        return true;
    }

    void DeleteTransaction()
    {
        navManager.NavigateTo("/transactiondelete/" + IdTransaction, true);
    }
}
