@page "/userdeletefromgroup/{idUser:int}/{idGroup:int}";
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@attribute [Authorize(Roles = "Admin, User")]
@inject NavigationManager navManager
@inject IJSRuntime js
@inject TransactionService transactionService
@inject UsersService userService
@inject LogsService logsService
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

@if (check == true)
{
    <div class="row justify-content-md-center text-center">
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
            <p class="fs-4 fw-bold">Czy na pewno chcesz usunąć użytkownika z grupy z adresem email: @deleteEmailUser ?</p>
                <button type="button" class="btn btn-success" @onclick="DeleteUserGroup" >Tak</button>
                <button type="button" class="btn btn-danger" @onclick="CancelDeleteUserGroup" >Nie</button>
        </div>
    </div>
}
else
{
    <div class="row justify-content-md-center text-center">
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
            <p class="fs-4 fw-bold">Błąd! Spróbuj ponownie później.</p>
            <a href="/" class="btn btn-success">Powrót do strony głównej</a>
        </div>
    </div>
}


@code {
    [Parameter]
    public int IdUser { get; set; } = 0;
    [Parameter]
    public int IdGroup { get; set; } = 0;

    public string deleteEmailUser = "";
    private bool check = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    LogsClass log = new LogsClass();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        var deleteIdUser = userService.GetByUserIdUser(IdUser);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;
        log.event_log = "tried to load another group to delete the user: " + IdGroup;

        if (IdGroup == 0)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else if (deleteIdUser == null)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else if (userInformation.id_group != IdGroup || deleteIdUser.id_group != IdGroup)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else
        {
            log.event_log = "successful load user from group: " + IdGroup + " ID user: " + IdUser;
            logsService.AddNewEvent(log);
            check = true;
            deleteEmailUser = deleteIdUser.email;
            log = new LogsClass();
        }
    }

    public async Task<bool> DeleteUserGroup()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);
        var deleteIdUser = userService.GetByUserIdUser(IdUser);

        if(deleteIdUser.id_group == userInformation.id_group)
        {
            if (userInformation.id_group == IdGroup)
            {
                var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
                var timeNow = DateTime.Now.ToString("HH:mm:ss");
                log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
                log.time = TimeOnly.Parse(timeNow);
                log.id_user = userInformation.id_user;

                userService.RemoveUserGroup(IdUser);
                transactionService.RemoveTransactionsGroup(IdUser);
                log.event_log = "successful delete user from group: " + IdGroup + " ID user: " + IdUser;
                logsService.AddNewEvent(log);
                js.InvokeVoidAsync("alert", "Pomyślne usunięcie!");
                navManager.NavigateTo("/groupsettings/", true);
            }
            else
            {
                navManager.NavigateTo("/", true);
            }
        }
        else
        {
            navManager.NavigateTo("/", true);
        }
        return true;
    }

    public async Task<bool> CancelDeleteUserGroup()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        log.event_log = "canceled delete user from group: " + IdGroup + " ID user: " + IdUser;
        logsService.AddNewEvent(log);
        navManager.NavigateTo("/groupusersettings/" + IdUser + "/" + IdGroup, true);
        return true;
    }

}
