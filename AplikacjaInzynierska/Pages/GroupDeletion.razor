@page "/groupdeletion/{idGroup:int}";
@using AplikacjaInzynierska.Authentication;
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navManager
@inject IJSRuntime js
@inject TransactionService transactionService
@inject UsersService userService
@inject GroupService groupService
@inject LogsService logsService
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

@if (check == true)
{
    <div class="row justify-content-md-center text-center">
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
            <p class="fs-4 fw-bold">Czy na pewno chcesz usunąć grupę: @nameGroupDisplay?</p>
                <button type="button" class="btn btn-success" @onclick="DeleteGroup" >Tak</button>
                <button type="button" class="btn btn-danger" @onclick="CancelDeleteGroup" >Nie</button>
        </div>
    </div>
}
else
{
    <div class="row justify-content-md-center text-center">
        <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
            <p class="fs-4 fw-bold">Błąd! Spróbuj ponownie później.</p>
            <a href="/" class="btn btn-success">Powrót do strony głównej</a>
        </div>
    </div>
}

@code {
    [Parameter]
    public int IdGroup { get; set; } = 0;

    public string nameGroupDisplay = "";
    private bool check = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    LogsClass log = new LogsClass();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime();
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;
        log.event_log = "tried to load another group for deletion: " + IdGroup;

        if (IdGroup == 0)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else if (userInformation == null)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else if (userInformation.id_group != IdGroup)
        {
            check = false;
            logsService.AddNewEvent(log);
        }
        else
        {
            var nameGroup = groupService.GetGroupName(Convert.ToInt32(IdGroup));
            nameGroupDisplay = nameGroup.name_group;

            log.event_log = "successful load user from group: " + IdGroup;
            logsService.AddNewEvent(log);
            check = true;
            log = new LogsClass();
        }
    }

    public async Task<bool> DeleteGroup()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        if (userInformation.id_group == IdGroup)
        {
            var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
            var timeNow = DateTime.Now.ToString("HH:mm:ss");
            log.date = DateTime.Parse(dateNow).ToUniversalTime();
            log.time = TimeOnly.Parse(timeNow);
            log.id_user = userInformation.id_user;

            groupService.DeleteGroup(userInformation.id_group);
            userService.RemoveUserGroup(userInformation.id_user);
            transactionService.RemoveTransactionsGroup(userInformation.id_user);
            log.event_log = "successful delete group: " + IdGroup;
            logsService.AddNewEvent(log);
            js.InvokeVoidAsync("alert", "Pomyślne usunięcie grupy!");
            navManager.NavigateTo("/groupsettings/", true);
        }
        else
        {
            check = false;
        }
        return true;
    }

    public async Task<bool> CancelDeleteGroup()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        var userInformation = userService.GetByUserEmail(claimEmail);

        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");
        log.date = DateTime.Parse(dateNow).ToUniversalTime();
        log.time = TimeOnly.Parse(timeNow);
        log.id_user = userInformation.id_user;

        log.event_log = "canceled delete group: " + IdGroup;
        logsService.AddNewEvent(log);
        navManager.NavigateTo("/groupsettings/", true);
        return true;
    }
}
