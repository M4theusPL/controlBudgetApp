@page "/login"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@using AplikacjaInzynierska.Data
@inject UsersService userService
@inject LogsService logsService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using System.Security.Cryptography;

<PageTitle>controlBudgetApp - Logowanie</PageTitle>

<EditForm Model="@model">
    <div class="row justify-content-md-center">
        <div class="col-sm-9 col-md-9 col-lg-6 col-xl-4 border p-3 mb-2 bg-light text-white rounded">
                <InputText class="form-control" @bind-Value="model.email" placeholder="Email" />
                <br />
                <InputText type="password" class="form-control" @bind-Value="model.password" placeholder="Hasło" />
                <br />
            <div class="row justify-content-around">
                <div class="col-12">
                    <button type="button" class="btn btn-success float-start" @onclick="Authenticate">Zaloguj się</button>
                @*</div>*@
                @*<div class="col-5">*@
                    <NavLink href="/accountregistration">
                        <button type="button" class="btn btn-warning float-end">Utwórz konto</button>
                    </NavLink>
                </div>

            </div>         
        </div>
    </div>
</EditForm>


@code {
    private class Model
    {
        public string email { get; set; }
        public string password { get; set; }
    }

    private Model model = new Model();
    LogsClass log = new LogsClass();

    private async Task Authenticate()
    {
        var userAccount = userService.GetByUserEmail(model.email);
        var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
        var timeNow = DateTime.Now.ToString("HH:mm:ss");

        log.date = DateTime.Parse(dateNow).ToUniversalTime();
        log.time = TimeOnly.Parse(timeNow);

        if (model.email == null || model.password == null)
        {
            await js.InvokeVoidAsync("alert", "Podano zły login lub hasło!");
            return;
        }
        else
        {
            var sha256 = SHA256.Create();
            var passwordBytes = System.Text.Encoding.UTF8.GetBytes(model.password);
            var passwordHash = sha256.ComputeHash(passwordBytes);
            string passwordHashed = BitConverter.ToString(passwordHash).Replace("-", "").ToLower();

            if (userAccount == null || userAccount.password != passwordHashed)
            {
                await js.InvokeVoidAsync("alert", "Podano zły login lub hasło!");

                log.id_user = 0;
                log.event_log = "failed login to: " + model.email;
                logsService.AddNewEvent(log);

                sha256 = null;
                passwordBytes = null;
                passwordHash = null;
                model.password = "";
                log = new LogsClass();

                return;
            }
            else
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        UserName = userAccount.name,
                        email = userAccount.email,
                        admin_group = userAccount.admin_group,
                        id_user = userAccount.id_user.ToString()
                    });

                log.id_user = userAccount.id_user;
                log.event_log = "successful login";
                logsService.AddNewEvent(log);
                log = new LogsClass();

                navManager.NavigateTo("/", true);
            }
        }
        

       

        
    }
}
