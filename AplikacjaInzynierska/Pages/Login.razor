@*@layout LoginLayout*@
@page "/login"
@using AplikacjaInzynierska.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row justify-content-md-center">
    <div class="col-1">
            Login <InputText @bind-Value="model.UserName" />
            Hasło <InputText @bind-Value="model.Password" />
            <button class="nav-link btn btn-link" @onclick="Authenticate">
                    Zaloguj się
            </button>
    </div>
</div>


@code {
    private class Model
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if(userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
            navManager.NavigateTo("/", true);
    }
}
