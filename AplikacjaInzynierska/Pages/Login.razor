@page "/login"
@using AplikacjaInzynierska.Authentication
@using AplikacjaInzynierska.Services
@inject GroupUserService groupUserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


<EditForm Model="@model">
    <div class="row justify-content-md-center">
        <div class="col-sm-9 col-md-9 col-lg-6 col-xl-4 border p-3 mb-2 bg-light text-white rounded">
                <InputText class="form-control" @bind-Value="model.email" placeholder="Email" />
                <br />
                <InputText type="password" class="form-control" @bind-Value="model.password" placeholder="Hasło" />
                <br />
            <div class="row justify-content-around">
                <div class="col-5">
                    <button type="button" class="btn btn-success" @onclick="Authenticate">Zaloguj się</button>
                </div>
                <div class="col-5">
                    <NavLink href="/accountregistration">
                        <button type="button" class="btn btn-warning">Utwórz konto</button>
                    </NavLink>
                </div>
                
            </div>         
        </div>
    </div>
</EditForm>


@code {
    private class Model
    {
        public string email { get; set; }
        public string password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        //var userAccount = userAccountService.GetByUserName(model.UserName);
        var userAccount = groupUserService.GetByUserName(model.email);
        if (userAccount == null || userAccount.password != model.password)
        {
            await js.InvokeVoidAsync("alert", "Podano zły login lub hasło!");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.name,
                admin_group = userAccount.admin_group
            });
            navManager.NavigateTo("/", true);
    }
}
