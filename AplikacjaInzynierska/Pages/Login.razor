@*@layout LoginLayout*@
@page "/login"
@using AplikacjaInzynierska.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


@*<div class="row justify-content-md-center">
    <div class="col-1">*@
        <EditForm Model="@model">
            <div class="row justify-content-md-center">
            <div class="col-3">
                <div class="input-group">
                Login <InputText class="form-control" @bind-Value="model.UserName" placeholder="Login" />
            </div>
            Hasło <InputText @bind-Value="model.Password" placeholder="Hasło" />
        @*<button class="nav-link btn btn-link" @onclick="Authenticate">
                        Zaloguj się
                </button>*@
                <br />
                <button type="button" class="btn btn-success" @onclick="Authenticate">Zaloguj się</button>
            </div>
            </div>
            
        </EditForm>
@*    </div>
</div>*@


@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if(userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
            navManager.NavigateTo("/", true);
    }
}
