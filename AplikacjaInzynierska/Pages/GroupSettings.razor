@page "/groupsettings"
@using AplikacjaInzynierska.Data;
@using AplikacjaInzynierska.Services;
@attribute [Authorize(Roles = "Admin, User")]
@inject TransactionService transactionService
@inject UsersService usersService
@inject GroupService groupService
@inject LogsService logsService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<PageTitle>controlBudgetApp - Ustawienia grupy</PageTitle>

@if (sc == null)
{
    <EditForm Model="model">
        <div class="row justify-content-md-center">
            <div class="col-5 border p-3 mb-2 bg-light text-dark text-center rounded">
                <p class="fs-4 fw-bold">
                    Tworzenie grupy
                </p>
                <div class="input-group mb-3">
                    <label class="col-sm-5 input-group-text" >Nazwa grupy</label>
                    <InputText class="form-control" maxlength="40" @bind-Value="model.groupname" />
                </div>

                <button type="button" class="btn btn-success" @onclick="CreateGroup">Utwórz grupę</button>
            </div>
        </div>
    </EditForm>
}
else
{
    <AuthorizeView Roles="Admin">
        <div class="row justify-content-md-center text-center">
            <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
                <p class="fs-4 fw-bold">Ustawienia grupy: @nameGroupDisplay</p>

                <div class="table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr class="fw-bold">
                                <td>Email</td>
                                <td>Imię</td>
                                <td>Nazwisko</td>
                                <td>Podgląd</td>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in sc)
                            {
                                <tr>
                                    <td>@item.email</td>
                                    <td>@item.name</td>
                                    <td>@item.surname</td>
                                    <td>
                                        <a class="nav-link" href="/groupusersettings/@item.id_user/@item.id_group">
                                            <span class="material-icons" aria-hidden="true">search</span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="my-5"></div>
                
                <EditForm Model="model" Context="another_context">
                    <div class="row justify-content-md-center text-center">
                        <div class="col-xs-10 col-md-9 col-lg-7 col-xl-6 col-xxl-5 mb-2 bg-light text-dark text-center rounded">
                            <p class="fs-4 fw-bold">
                                Dodawanie członka grupy
                            </p>
                            <div class="input-group mb-3">
                                <label class="input-group-text" >Email</label>
                                <InputText class="form-control" maxlength="40" @bind-Value="model.email" />
                            </div>
                            <button type="button" class="btn btn-success" @onclick="Authenticate">Dodaj użytkownika</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
     </AuthorizeView>


     <AuthorizeView Roles="User">
        <div class="row justify-content-md-center text-center">
            
            <div class="col-11 border p-3 mb-2 bg-light text-dark rounded">
                    <p class="fs-4 fw-bold">Lista użytkowników grupy: @nameGroupDisplay</p>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr class="fw-bold">
                                <td>Email</td>
                                <td>Imię</td>
                                <td>Nazwisko</td>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in sc)
                            {
                                <tr>
                                    <td>@item.email</td>
                                    <td>@item.name</td>
                                    <td>@item.surname</td>
                                 </tr>
                            }
                        </tbody>
                    </table>
            </div>
        </div>
     </AuthorizeView>
}


@code {

    Model model = new Model();

    class Model
    {
        public string? groupname { get; set; }
        public string? email { get; set; } = "";
    }

    public string nameGroupDisplay = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    public System.Collections.Generic.IList<UsersClass> sc;
    LogsClass log = new LogsClass();
    GroupClass gc = new GroupClass();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;

        var userInformation = usersService.GetByUserEmail(claimEmail);
        var id_group = userInformation.id_group;

        if (id_group == 0)
        {
            sc = null;
        }
        else
        {
            var nameGroup = groupService.GetGroupName(Convert.ToInt32(id_group));
            nameGroupDisplay = nameGroup.name_group;
            sc = usersService.displayUsersGroup(id_group);
        }
    }

    async Task CreateGroup()
    {
        if (model.groupname != "")
        {
            var authState = await authenticationState;
            var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
            var userInformation = usersService.GetByUserEmail(claimEmail);
            var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
            var timeNow = DateTime.Now.ToString("HH:mm:ss");
            log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
            log.time = TimeOnly.Parse(timeNow);
            log.id_user = userInformation.id_user;
            log.event_log = "successful created group: " + model.groupname;

            gc.name_group = model.groupname;
            int newGroupId = await groupService.AddNewGroup(gc);
            UsersClass uc = new UsersClass();
            uc.id_user = userInformation.id_user;
            uc.email = userInformation.email;
            uc.id_group = newGroupId;
            uc.admin_group = "Admin";
            usersService.AddUserGroup(uc);
            transactionService.AddTransactionGroup(userInformation.id_user, newGroupId);
            logsService.AddNewEvent(log);
            log = new LogsClass();
            js.InvokeVoidAsync("alert", "Pomyślnie utworzono grupę!");
            navManager.NavigateTo("/groupsettings", true);
        }
        else
        {
            js.InvokeVoidAsync("alert", "Nie podano nazwy grupy!");
            return;
        }
    }

    async Task Authenticate()
    {
        if (model.email != "")
        {
            var authState = await authenticationState;
            var claimEmail = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
            var userInformation = usersService.GetByUserEmail(claimEmail);
            var id_group = userInformation.id_group;
            var userAccount = usersService.GetByUserEmail(model.email);

            var dateNow = DateTime.Now.ToString("yyyy-MM-dd");
            var timeNow = DateTime.Now.ToString("HH:mm:ss");
            log.date = DateTime.Parse(dateNow).ToUniversalTime().AddDays(1);
            log.time = TimeOnly.Parse(timeNow);

            log.id_user = userInformation.id_user;

            if (userAccount == null)
            {
                js.InvokeVoidAsync("alert", "Konto pod tym adresem email nie istnieje!");
                log.event_log = "failed added: " + model.email + " in group: " + userInformation.id_group + " the account doesn't exist";
                logsService.AddNewEvent(log);
                log = new LogsClass();
                return;
            }
            else
            {
                if (userAccount.id_group == 0)
                {
                    UsersClass uc = new UsersClass();
                    uc.id_user = userAccount.id_user;
                    uc.email = userAccount.email;
                    uc.id_group = id_group;
                    uc.admin_group = "User";
                    usersService.AddUserGroup(uc);
                    transactionService.AddTransactionGroup(userAccount.id_user, id_group);
                    js.InvokeVoidAsync("alert", "Pomyślnie dodano użytkownika do grupy!");
                    log.event_log = "successful added: " + model.email + " in group: " + userInformation.id_group;
                    logsService.AddNewEvent(log);
                    log = new LogsClass();
                    navManager.NavigateTo("/groupsettings", true);
                }
                else
                {
                    js.InvokeVoidAsync("alert", "Konto pod tym adresem email już jest przypisane do innej grupy!");
                    log.event_log = "failed added: " + model.email + " in group: " + userInformation.id_group + " the account belongs to a different group";
                    log = new LogsClass();
                    logsService.AddNewEvent(log);
                    return;
                }
            }
            
        }
        else
        {
            js.InvokeVoidAsync("alert", "Nie podano adresu email!");
            return;
        }
    }
}